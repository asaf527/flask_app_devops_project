# name: Set up EKS with Terraform

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_REGION: ${{ secrets.AWS_REGION }}
#   EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
#   TF_STATE_BUCKET: "regtech-iac-logs-2024"  # Bucket for Terraform state

# jobs:
#   LogInToAWS:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#   CreateStateBucket:
#     runs-on: ubuntu-latest
#     needs: LogInToAWS
#     steps:
#       - name: Create Terraform State Bucket
#         run: |
#           if ! aws s3api head-bucket --bucket ${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
#             echo "Creating Terraform state bucket..."
#             aws s3api create-bucket \
#               --bucket ${{ env.TF_STATE_BUCKET }} \
#               --region us-east-1
            
#             # Enable versioning
#             aws s3api put-bucket-versioning \
#               --bucket ${{ env.TF_STATE_BUCKET }} \
#               --versioning-configuration Status=Enabled
            
#             # Block public access
#             aws s3api put-public-access-block \
#               --bucket ${{ env.TF_STATE_BUCKET }} \
#               --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            
#             echo "Terraform state bucket created successfully"
#           else
#             echo "Terraform state bucket already exists"
#           fi

#   TerraformInit:
#     runs-on: ubuntu-latest
#     needs: CreateStateBucket
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Initialize Terraform
#         working-directory: ./terraform
#         run: terraform init -reconfigure
          
#   TerraformPlan:
#     runs-on: ubuntu-latest
#     needs: TerraformInit
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Initialize and Plan
#         working-directory: ./terraform
#         run: |
#           terraform init -reconfigure
#           terraform plan

#   TerraformApply:
#     runs-on: ubuntu-latest
#     needs: TerraformPlan
#     if: github.ref == 'refs/heads/main'  # Only apply on main branch
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Initialize and Apply
#         working-directory: ./terraform
#         run: |
#           terraform init -reconfigure
#           terraform apply -auto-approve